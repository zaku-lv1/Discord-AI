# =================================================================================
# Discord AI Bot - Environment Configuration
# =================================================================================
# Copy this file to .env and fill in your actual values

# =================================================================================
# Application Environment
# =================================================================================
# Set to 'production' for production deployment
NODE_ENV=development

# =================================================================================
# Discord Bot Configuration
# =================================================================================
# Your Discord bot token from https://discord.com/developers/applications
DISCORD_TOKEN=your_discord_bot_token_here

# Discord OAuth2 Application Credentials for web login
# Create these at https://discord.com/developers/applications -> OAuth2
# IMPORTANT: Client ID must be a 17-19 digit numeric snowflake ID (e.g., 1234567890123456789)
# Do NOT use test values like "test_client_id" - this will cause authentication errors
DISCORD_CLIENT_ID=1234567890123456789
DISCORD_CLIENT_SECRET=your_discord_client_secret_here

# Optional: Override automatic callback URL construction
# Useful for complex deployment scenarios or custom domains
# DISCORD_CALLBACK_URL=https://your-domain.com/auth/discord/callback

# The domain where your admin panel will be hosted
# For development: localhost
# For production: your-domain.com (without protocol)
# For GitHub Codespaces: your-codespace-name.app.github.dev
# Note: This must match the actual domain where the app is accessed
ADMIN_DOMAIN=localhost

# =================================================================================
# Google Gemini AI Configuration
# =================================================================================
# Get your API key from https://ai.google.dev/
GEMINI_API_KEY=your_gemini_api_key_here

# =================================================================================
# Firebase Configuration
# =================================================================================
# Firebase project configuration for data storage
FIREBASE_PROJECT_ID=your-firebase-project-id
FIREBASE_API_KEY=your_firebase_api_key
FIREBASE_AUTH_DOMAIN=your-firebase-project.firebaseapp.com
FIREBASE_STORAGE_BUCKET=your-firebase-project.appspot.com
FIREBASE_MESSAGING_SENDER_ID=123456789
FIREBASE_APP_ID=1:123456789:web:abcdefghijklmnop

# Firebase Admin SDK Service Account JSON
# Download from Firebase Console -> Project Settings -> Service Accounts
# Paste the entire JSON content as a single line string
FIREBASE_SERVICE_ACCOUNT_JSON='{"type":"service_account","project_id":"your-project","private_key_id":"...","private_key":"-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n","client_email":"...","client_id":"...","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token"}'

# =================================================================================
# Server Configuration
# =================================================================================
# Port number for the web server
# Development default: 8080, Production: 80 (HTTP) or 443 (HTTPS)
PORT=8080

# Session secret for both Discord OAuth and local authentication (generate a random string)
# Use a strong, unique secret for production!
SESSION_SECRET=your_random_session_secret_here

# =================================================================================
# Local Authentication System
# =================================================================================
# The system now supports both Discord OAuth and independent local authentication
# Users can create accounts with username/password without requiring Discord
# Both authentication methods can be used simultaneously

# No additional configuration needed for local authentication
# The system automatically detects available authentication methods
# Local users are stored in Firebase under the 'local_users' collection