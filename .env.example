# =================================================================================
# Discord AI Bot - Environment Configuration
# =================================================================================
# Copy this file to .env and fill in your actual values

# =================================================================================
# Application Environment
# =================================================================================
# Set to 'production' for production deployment
NODE_ENV=development

# =================================================================================
# Email Configuration
# =================================================================================

# =================================================================================
# Development Environment - Lightweight SMTP Server
# =================================================================================
# Port for the lightweight SMTP server (default: 2525)
SMTP_PORT=2525

# System email address for sending authentication emails
SYSTEM_EMAIL=ai-system@localhost

# =================================================================================
# Production Environment - External SMTP Configuration
# =================================================================================
# SMTP server hostname (Gmail: smtp.gmail.com, SendGrid: smtp.sendgrid.net)
# SMTP_HOST=smtp.gmail.com

# SMTP server port (587 for TLS, 465 for SSL, 25 for plain)
# SMTP_PORT=587

# Enable SSL connection (true for port 465, false for other ports)
# SMTP_SECURE=false

# SMTP authentication username (Gmail: your-email@gmail.com, SendGrid: apikey)
# SMTP_USER=your-email@yourdomain.com

# SMTP authentication password (Gmail: app-password, SendGrid: api-key)
# SMTP_PASS=your-password-or-api-key

# =================================================================================
# Gmail OAuth2 Configuration (Recommended for Gmail)
# =================================================================================
# Gmail OAuth2 Client ID from Google Cloud Console
# GMAIL_CLIENT_ID=your-oauth-client-id

# Gmail OAuth2 Client Secret from Google Cloud Console
# GMAIL_CLIENT_SECRET=your-oauth-client-secret

# Gmail OAuth2 Refresh Token
# GMAIL_REFRESH_TOKEN=your-refresh-token

# Gmail OAuth2 Access Token (optional, will be auto-refreshed)
# GMAIL_ACCESS_TOKEN=your-access-token

# =================================================================================
# Email Provider Examples
# =================================================================================

# Gmail with App Password:
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_SECURE=false
# SMTP_USER=your-email@gmail.com
# SMTP_PASS=your-16-char-app-password
# SYSTEM_EMAIL=your-email@gmail.com

# SendGrid:
# SMTP_HOST=smtp.sendgrid.net
# SMTP_PORT=587
# SMTP_SECURE=false
# SMTP_USER=apikey
# SMTP_PASS=your-sendgrid-api-key
# SYSTEM_EMAIL=no-reply@yourdomain.com

# Amazon SES:
# SMTP_HOST=email-smtp.us-east-1.amazonaws.com
# SMTP_PORT=587
# SMTP_SECURE=false
# SMTP_USER=your-ses-access-key
# SMTP_PASS=your-ses-secret-key
# SYSTEM_EMAIL=no-reply@yourdomain.com

# Microsoft 365:
# SMTP_HOST=smtp.office365.com
# SMTP_PORT=587
# SMTP_SECURE=false
# SMTP_USER=your-email@yourdomain.com
# SMTP_PASS=your-password
# SYSTEM_EMAIL=your-email@yourdomain.com

# =================================================================================
# Discord Bot Configuration (Optional)
# =================================================================================
# Your Discord bot token from https://discord.com/developers/applications
# Note: Discord login functionality has been removed, this is only for the bot
DISCORD_TOKEN=your_discord_bot_token_here

# The domain where your admin panel will be hosted
# For development: localhost
# For production: your-domain.com (without protocol)
# For GitHub Codespaces: your-codespace-name.app.github.dev
# Note: This must match the actual domain where the app is accessed
ADMIN_DOMAIN=localhost

# =================================================================================
# Google Gemini AI Configuration
# =================================================================================
# Get your API key from https://ai.google.dev/
GEMINI_API_KEY=your_gemini_api_key_here

# =================================================================================
# Firebase Configuration
# =================================================================================
# Firebase project configuration for data storage
FIREBASE_PROJECT_ID=your-firebase-project-id
FIREBASE_API_KEY=your_firebase_api_key
FIREBASE_AUTH_DOMAIN=your-firebase-project.firebaseapp.com
FIREBASE_STORAGE_BUCKET=your-firebase-project.appspot.com
FIREBASE_MESSAGING_SENDER_ID=123456789
FIREBASE_APP_ID=1:123456789:web:abcdefghijklmnop

# Firebase Admin SDK Service Account JSON
# Download from Firebase Console -> Project Settings -> Service Accounts
# Paste the entire JSON content as a single line string
FIREBASE_SERVICE_ACCOUNT_JSON='{"type":"service_account","project_id":"your-project","private_key_id":"...","private_key":"-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n","client_email":"...","client_id":"...","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token"}'

# =================================================================================
# Server Configuration
# =================================================================================
# Port number for the web server
# Development default: 8080, Production: 80 (HTTP) or 443 (HTTPS)
PORT=8080

# Session secret for authentication (generate a random string)
# Use a strong, unique secret for production!
SESSION_SECRET=your_random_session_secret_here

# =================================================================================
# Email Authentication System
# =================================================================================
# The system now uses email-based authentication exclusively
# Users create accounts with username/email/password
# Email verification is required before account activation
# Password reset functionality is available via email
# All user data is stored in Firebase under the 'users' collection